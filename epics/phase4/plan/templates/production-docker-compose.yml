# Production-Ready Docker Compose Template
# Optimized for high availability and security

version: '3.8'

services:
  # API Service with Auto-scaling Simulation
  api:
    image: doc-rag/api:${VERSION:-latest}
    container_name: doc-rag-api-${ENVIRONMENT:-prod}
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: unless-stopped
        delay: 10s
        max_attempts: 3
    ports:
      - "${API_PORT:-8080}:8080"
      - "${METRICS_PORT:-9090}:9090"
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - RUST_BACKTRACE=${BACKTRACE:-0}
      - DATABASE_URL=postgres://docrag:${POSTGRES_PASSWORD}@postgres:5432/docrag
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_RPM=${RATE_LIMIT:-100}
      - SECURITY_HEADERS_ENABLED=true
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - JAEGER_AGENT_ENDPOINT=http://jaeger:14268
    volumes:
      - ./config/api:/app/config:ro
      - doc_storage:/app/storage
      - api_logs:/app/logs
      - /tmp:/tmp:noexec,nosuid,size=100m
    networks:
      - doc-rag-internal
      - doc-rag-monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "1001:1001"
    read_only: true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy

  # Neural Chunking Service
  neural-chunker:
    image: doc-rag/neural-chunker:${VERSION:-latest}
    container_name: doc-rag-neural-chunker
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MODEL_PATH=/app/models
      - BATCH_SIZE=${NEURAL_BATCH_SIZE:-32}
    volumes:
      - neural_models:/app/models
      - neural_logs:/app/logs
    networks:
      - doc-rag-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 45s
      timeout: 15s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1001:1001"

  # PostgreSQL with High Availability Configuration
  postgres:
    image: postgres:16-alpine
    container_name: doc-rag-postgres-${ENVIRONMENT:-prod}
    environment:
      - POSTGRES_DB=docrag
      - POSTGRES_USER=docrag
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/init-extensions.sql:/docker-entrypoint-initdb.d/02-extensions.sql:ro
      - postgres_logs:/var/log/postgresql
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - doc-rag-internal
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-127.0.0.1:5432}:5432"
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      -c log_statement=all
      -c log_directory=/var/log/postgresql
      -c logging_collector=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docrag -d docrag"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE

  # Redis with Persistence and Clustering
  redis:
    image: redis:7-alpine
    container_name: doc-rag-redis-${ENVIRONMENT:-prod}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory ${REDIS_MEMORY:-2gb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - doc-rag-internal
    ports:
      - "${REDIS_EXTERNAL_PORT:-127.0.0.1:6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.6.1
    container_name: doc-rag-qdrant-${ENVIRONMENT:-prod}
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant:/qdrant/config:ro
    networks:
      - doc-rag-internal
    ports:
      - "${QDRANT_EXTERNAL_PORT:-127.0.0.1:6333}:6333"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=${LOG_LEVEL:-INFO}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1001:1001"

  # NGINX Load Balancer with SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: doc-rag-nginx-${ENVIRONMENT:-prod}
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./config/nginx/security-headers.conf:/etc/nginx/security-headers.conf:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - doc-rag-public
      - doc-rag-internal
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "nginx:nginx"
    read_only: true
    tmpfs:
      - /var/run:noexec,nosuid,size=50m

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: doc-rag-prometheus-${ENVIRONMENT:-prod}
    ports:
      - "${PROMETHEUS_PORT:-127.0.0.1:9091}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alerting:/etc/prometheus/alerting:ro
      - prometheus_data:/prometheus
    networks:
      - doc-rag-monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "nobody:nobody"

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.2.3
    container_name: doc-rag-grafana-${ENVIRONMENT:-prod}
    ports:
      - "${GRAFANA_PORT:-127.0.0.1:3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_INSTALL_PLUGINS=redis-datasource,prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    networks:
      - doc-rag-monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "472:472"

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: doc-rag-jaeger-${ENVIRONMENT:-prod}
    ports:
      - "${JAEGER_UI_PORT:-127.0.0.1:16686}:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=10000
    networks:
      - doc-rag-monitoring
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/docrag/data}/postgres
  redis_data:
    driver: local  
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/docrag/data}/redis
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/docrag/data}/qdrant
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/docrag/data}/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/docrag/data}/grafana
  doc_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/docrag}/storage
  neural_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/docrag}/models
  # Log volumes
  api_logs:
    driver: local
  nginx_logs:
    driver: local
  postgres_logs:
    driver: local
  redis_logs:
    driver: local
  neural_logs:
    driver: local
  nginx_cache:
    driver: local

networks:
  doc-rag-public:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${PUBLIC_SUBNET:-172.30.0.0/24}
          gateway: ${PUBLIC_GATEWAY:-172.30.0.1}
  doc-rag-internal:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: ${INTERNAL_SUBNET:-172.31.0.0/24}
          gateway: ${INTERNAL_GATEWAY:-172.31.0.1}
  doc-rag-monitoring:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: ${MONITORING_SUBNET:-172.32.0.0/24}
          gateway: ${MONITORING_GATEWAY:-172.32.0.1}

# Production secrets - use external secrets manager in production
secrets:
  postgres_password:
    external: true
    external_name: ${POSTGRES_PASSWORD_SECRET:-doc-rag-postgres-password}
  redis_password:
    external: true
    external_name: ${REDIS_PASSWORD_SECRET:-doc-rag-redis-password}
  jwt_secret:
    external: true
    external_name: ${JWT_SECRET_SECRET:-doc-rag-jwt-secret}
  grafana_admin_password:
    external: true
    external_name: ${GRAFANA_PASSWORD_SECRET:-doc-rag-grafana-password}