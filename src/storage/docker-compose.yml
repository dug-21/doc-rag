# Docker Compose for MongoDB Vector Storage Development and Testing

version: '3.8'

services:
  # MongoDB with Vector Search support
  mongodb:
    image: mongodb/mongodb-community-server:7.0-ubuntu2204
    container_name: rag-mongodb
    restart: unless-stopped
    environment:
      MONGODB_INITDB_ROOT_USERNAME: admin
      MONGODB_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-password123}
      MONGODB_INITDB_DATABASE: rag_storage
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init-mongodb.js:/docker-entrypoint-initdb.d/init.js:ro
    command: >
      mongod 
      --replSet rs0 
      --bind_ip_all 
      --keyFile /data/configdb/keyfile
      --auth
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # MongoDB Express (Web UI)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: rag-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD:-password123}
      ME_CONFIG_MONGODB_URL: mongodb://admin:${MONGODB_PASSWORD:-password123}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-admin123}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - rag-network

  # Vector Storage Service
  vector-storage:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - RUST_VERSION=1.75
    container_name: rag-vector-storage
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      MONGODB_URI: mongodb://admin:${MONGODB_PASSWORD:-password123}@mongodb:27017/rag_storage?authSource=admin
      STORAGE_DATABASE_NAME: rag_storage
      STORAGE_CHUNK_COLLECTION_NAME: chunks
      STORAGE_METADATA_COLLECTION_NAME: metadata
      STORAGE_MAX_POOL_SIZE: 10
      STORAGE_MIN_POOL_SIZE: 1
      STORAGE_CONNECTION_TIMEOUT_SECS: 10
      STORAGE_OPERATION_TIMEOUT_SECS: 30
      STORAGE_VECTOR_SEARCH__EMBEDDING_DIMENSION: 384
      STORAGE_PERFORMANCE__BATCH_SIZE: 100
      STORAGE_MONITORING__LOG_LEVEL: info
      RUST_LOG: storage=info,mongodb=warn
    volumes:
      - ./storage.toml:/app/storage.toml:ro
      - storage_logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MongoDB Replica Set Initializer (runs once)
  mongo-setup:
    image: mongodb/mongodb-community-server:7.0-ubuntu2204
    container_name: rag-mongo-setup
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - rag-network
    volumes:
      - ./scripts/setup-replica.sh:/setup-replica.sh:ro
    command: >
      bash -c "
        echo 'Waiting for MongoDB to be ready...' &&
        sleep 10 &&
        /setup-replica.sh
      "
    restart: "no"

  # Performance Testing Service
  storage-benchmark:
    build:
      context: .
      dockerfile: Dockerfile.benchmark
    container_name: rag-storage-benchmark
    environment:
      MONGODB_URI: mongodb://admin:${MONGODB_PASSWORD:-password123}@mongodb:27017/benchmark_rag_storage?authSource=admin
      BENCHMARK_DATASET_SIZE: ${BENCHMARK_SIZE:-1000}
      BENCHMARK_CONCURRENT_USERS: ${BENCHMARK_CONCURRENCY:-4}
    volumes:
      - benchmark_results:/app/results
    depends_on:
      vector-storage:
        condition: service_healthy
    networks:
      - rag-network
    profiles:
      - benchmark
    command: >
      bash -c "
        echo 'Starting storage benchmarks...' &&
        cargo bench --bench storage_benchmarks -- --output-format json > /app/results/storage_bench.json &&
        cargo bench --bench vector_search_benchmarks -- --output-format json > /app/results/vector_bench.json &&
        echo 'Benchmarks completed. Results saved to /app/results/'
      "

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: rag-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rag-network
    profiles:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: rag-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - rag-network
    profiles:
      - monitoring

  # Redis for caching (optional)
  redis:
    image: redis:7.2-alpine
    container_name: rag-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    networks:
      - rag-network
    profiles:
      - caching
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  storage_logs:
    driver: local
  benchmark_results:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16