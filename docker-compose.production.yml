# Production Docker Compose Configuration
# Security-hardened configuration with production-ready settings

version: '3.8'

services:
  # Core Application Services with Security Hardening
  api:
    build:
      context: .
      dockerfile: src/api/Dockerfile
      target: production
    container_name: doc-rag-api-prod
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics (internal network only in production)
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=0
      - DATABASE_URL=postgres://docrag:${POSTGRES_PASSWORD}@postgres:5432/docrag
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - JAEGER_AGENT_ENDPOINT=jaeger:14268
      - PROMETHEUS_ENDPOINT=prometheus:9090
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_RPM=100
      - SECURITY_HEADERS_ENABLED=true
      - CORS_ORIGINS=${CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./config:/app/config:ro
      - doc_storage:/app/storage
      - api_logs:/app/logs
    networks:
      - doc-rag-internal
      - doc-rag-monitoring
    restart: unless-stopped
    user: "1001:1001"  # Non-root user
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Enhanced Security Services
  security-service:
    build:
      context: .
      dockerfile: src/security/Dockerfile
    container_name: doc-rag-security
    ports:
      - "8087:8080"
    environment:
      - RUST_LOG=info
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_ENABLED=true
      - OWASP_MODE=strict
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - security_logs:/app/logs
      - ./config/security:/app/config:ro
    networks:
      - doc-rag-internal
    restart: unless-stopped
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Services with Security Hardening
  postgres:
    image: postgres:16-alpine
    container_name: doc-rag-postgres-prod
    environment:
      - POSTGRES_DB=docrag
      - POSTGRES_USER=docrag
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres_logs:/var/log/postgresql
    networks:
      - doc-rag-internal
    restart: unless-stopped
    user: "postgres:postgres"
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /run/postgresql:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docrag -d docrag"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      -c log_statement=all
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c logging_collector=on
      -c max_connections=100
      -c shared_preload_libraries=pg_stat_statements

  redis:
    image: redis:7-alpine
    container_name: doc-rag-redis-prod
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --stop-writes-on-bgsave-error yes
      --appendonly yes
      --appendfsync everysec
      --no-appendfsync-on-rewrite no
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - doc-rag-internal
    restart: unless-stopped
    user: "999:999"  # Redis user
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Monitoring Stack with Security
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: doc-rag-prometheus-prod
    ports:
      - "127.0.0.1:9091:9090"  # Internal access only
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.wal-compression'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alerting:/etc/prometheus/alerting:ro
      - prometheus_data:/prometheus
    networks:
      - doc-rag-monitoring
    restart: unless-stopped
    user: "nobody:nobody"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  grafana:
    image: grafana/grafana:10.2.3
    container_name: doc-rag-grafana-prod
    ports:
      - "127.0.0.1:3000:3000"  # Internal access only
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_logs:/var/log/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - doc-rag-monitoring
    restart: unless-stopped
    user: "472:472"  # Grafana user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    depends_on:
      - prometheus

  # Load Balancer with Security Headers
  nginx:
    image: nginx:1.25-alpine
    container_name: doc-rag-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./config/nginx/security-headers.conf:/etc/nginx/security-headers.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - doc-rag-public
      - doc-rag-internal
    restart: unless-stopped
    user: "nginx:nginx"
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    depends_on:
      - api
      - security-service

  # Security Monitoring
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: doc-rag-fail2ban
    environment:
      - TZ=UTC
      - F2B_LOG_LEVEL=INFO
      - F2B_LOG_TARGET=STDOUT
    volumes:
      - ./config/fail2ban:/data
      - nginx_logs:/var/log/nginx:ro
      - /var/log/auth.log:/var/log/auth.log:ro
    networks:
      - doc-rag-monitoring
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - NET_RAW
    privileged: false
    security_opt:
      - no-new-privileges:true

  # Log Aggregation
  fluentd:
    image: fluent/fluentd:v1.16-debian
    container_name: doc-rag-fluentd
    volumes:
      - ./config/fluentd:/fluentd/etc
      - api_logs:/var/log/api:ro
      - nginx_logs:/var/log/nginx:ro
      - postgres_logs:/var/log/postgresql:ro
      - redis_logs:/var/log/redis:ro
      - security_logs:/var/log/security:ro
      - grafana_logs:/var/log/grafana:ro
    networks:
      - doc-rag-monitoring
    restart: unless-stopped
    user: "fluent:fluent"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docrag/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docrag/data/redis
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docrag/data/qdrant
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docrag/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docrag/data/grafana
  doc_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docrag/storage
  # Log volumes
  api_logs:
    driver: local
  nginx_logs:
    driver: local
  postgres_logs:
    driver: local
  redis_logs:
    driver: local
  security_logs:
    driver: local
  grafana_logs:
    driver: local

networks:
  doc-rag-public:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/24
          gateway: 172.30.0.1
  doc-rag-internal:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.31.0.0/24
          gateway: 172.31.0.1
  doc-rag-monitoring:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.32.0.0/24
          gateway: 172.32.0.1

# Secrets (use external secrets in production)
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  grafana_admin_password:
    external: true