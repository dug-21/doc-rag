# Production Rust Dockerfile for Phase 2 Doc-RAG System
# Implements mandatory dependencies: ruv-FANN, DAA-Orchestrator, FACT

# Build stage
FROM rust:1.75-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libopenblas-dev \
    cmake \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy workspace files
COPY Cargo.toml Cargo.lock ./
COPY src ./src

# Build release binary with all mandatory dependencies
ENV CARGO_PROFILE_RELEASE_LTO=fat
ENV CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
RUN cd /app && cargo build --release --package api --bin api-server

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libopenblas0 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -r -s /bin/false docrag

# Copy binary from builder
COPY --from=builder /app/target/release/api-server /usr/local/bin/

# Create necessary directories
RUN mkdir -p /app/{uploads,models,logs,config,cache} && \
    chown -R docrag:docrag /app

# Copy models for ruv-FANN
COPY --chown=docrag:docrag models /app/models

USER docrag
WORKDIR /app

# Environment variables for mandatory dependencies
ENV RUST_LOG=info,api=debug,ruv_fann=info,daa_orchestrator=info,fact=info
ENV RUST_BACKTRACE=1

# Mandatory dependency configuration
ENV RUV_FANN_MODEL_PATH=/app/models/ruv-fann
ENV DAA_ORCHESTRATOR_CONFIG=/app/config/daa.toml
ENV FACT_CACHE_PATH=/app/cache/fact

# Performance tuning
ENV TOKIO_WORKER_THREADS=4
ENV MAX_CONCURRENT_REQUESTS=1000

# Database connections
ENV MONGODB_URL=mongodb://mongodb:27017/doc_rag
ENV REDIS_URL=redis://redis:6379

# Feature flags - ALL mandatory dependencies enabled
ENV ENABLE_RUV_FANN=true
ENV ENABLE_DAA_ORCHESTRATOR=true
ENV ENABLE_FACT_CACHE=true
ENV ENABLE_BYZANTINE_CONSENSUS=true
ENV BYZANTINE_THRESHOLD=0.67

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

CMD ["api-server"]