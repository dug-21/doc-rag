# ConfigMaps for Doc-RAG Kubernetes deployment
apiVersion: v1
kind: ConfigMap
metadata:
  name: doc-rag-config
  namespace: doc-rag-prod
  labels:
    app.kubernetes.io/name: doc-rag
    app.kubernetes.io/component: config
data:
  # Application configuration
  RUST_LOG: "info"
  ENVIRONMENT: "production"
  
  # Service discovery
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "docrag"
  
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  QDRANT_HOST: "qdrant-service"
  QDRANT_PORT: "6333"
  
  MINIO_HOST: "minio-service"
  MINIO_PORT: "9000"
  
  # Monitoring
  PROMETHEUS_HOST: "prometheus-service"
  PROMETHEUS_PORT: "9090"
  JAEGER_HOST: "jaeger-service"
  JAEGER_PORT: "14268"
  
  # Security settings
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_RPM: "100"
  SECURITY_HEADERS_ENABLED: "true"
  OWASP_MODE: "strict"
  
  # Performance tuning
  MAX_CONNECTIONS: "100"
  WORKER_THREADS: "4"
  MAX_REQUEST_SIZE: "10485760"  # 10MB
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: doc-rag-prod
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  POSTGRES_DB: "docrag"
  POSTGRES_USER: "docrag"
  # SSL and logging configuration
  ssl: "on"
  log_statement: "all"
  max_connections: "100"
  shared_preload_libraries: "pg_stat_statements"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: doc-rag-prod
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
data:
  redis.conf: |
    maxmemory 2gb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000
    rdbcompression yes
    rdbchecksum yes
    stop-writes-on-bgsave-error yes
    appendonly yes
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: doc-rag-prod
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: proxy
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self'" always;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
        
        # Logging
        log_format json_combined escape=json
            '{'
                '"time_local":"$time_local",'
                '"remote_addr":"$remote_addr",'
                '"remote_user":"$remote_user",'
                '"request":"$request",'
                '"status": "$status",'
                '"body_bytes_sent":"$body_bytes_sent",'
                '"request_time":"$request_time",'
                '"http_referrer":"$http_referer",'
                '"http_user_agent":"$http_user_agent",'
                '"http_x_forwarded_for":"$http_x_forwarded_for"'
            '}';
        
        access_log /var/log/nginx/access.log json_combined;
        
        # Upstream services
        upstream api {
            server api-service:8080 max_fails=3 fail_timeout=30s;
        }
        
        upstream security {
            server security-service:8080 max_fails=3 fail_timeout=30s;
        }
        
        server {
            listen 80;
            server_name _;
            return 301 https://$host$request_uri;
        }
        
        server {
            listen 443 ssl http2;
            server_name _;
            
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            
            # Security and rate limiting
            limit_req zone=api burst=20 nodelay;
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /api/ {
                proxy_pass http://api/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
            
            location /auth/ {
                limit_req zone=auth burst=10 nodelay;
                proxy_pass http://security/auth/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }