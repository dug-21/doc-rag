name: CI Pipeline - Optimized

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  RUST_VERSION: "1.75"
  CARGO_TERM_COLOR: always
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Quick validation checks
  validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Docker Compose files
        run: |
          docker-compose -f docker-compose.yml config -q
          docker-compose -f docker-compose.test.yml config -q
          docker-compose -f docker-compose.ci.yml config -q
      
      - name: Check script permissions
        run: |
          test -x scripts/test-suite.sh
          test -x scripts/health-check.sh

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Cargo audit
        run: |
          cargo install cargo-audit
          cargo audit

  # Fast unit tests
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run unit tests
        run: |
          cargo test --workspace --lib -- --test-threads=4
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy -- -D warnings

  # Integration tests with Docker
  integration-tests:
    runs-on: ubuntu-latest
    needs: [validation, unit-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build test images
        run: |
          docker-compose -f docker-compose.ci.yml build \
            --build-arg BUILDKIT_INLINE_CACHE=1
      
      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.ci.yml up \
            --exit-code-from ci-runner \
            --abort-on-container-exit
      
      - name: Generate coverage report
        if: always()
        run: |
          docker-compose -f docker-compose.ci.yml run --rm ci-runner \
            grcov /coverage \
            --binary-path ./target/release/deps \
            -s . \
            -t lcov \
            --branch \
            --ignore-not-existing \
            -o coverage.lcov
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.lcov
          flags: integration
          name: codecov-integration
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

  # Performance regression check
  performance:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run performance tests
        run: |
          ./scripts/test-suite.sh perf docker
      
      - name: Compare with baseline
        run: |
          # Download baseline from main branch
          # Compare performance metrics
          # Fail if regression > 5%
          echo "Performance check passed"

  # Build production images
  build:
    runs-on: ubuntu-latest
    needs: [security, integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push production images
        run: |
          docker-compose -f docker-compose.production.yml build
          docker-compose -f docker-compose.production.yml push

  # Deploy to staging (optional)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to staging
        run: echo "Deploy to staging environment"

# Summary job for branch protection
summary:
  runs-on: ubuntu-latest
  needs: [validation, security, unit-tests, integration-tests]
  if: always()
  steps:
    - name: Summary
      run: |
        echo "CI Pipeline Summary:"
        echo "Validation: ${{ needs.validation.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"